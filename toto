fn start_timer(end_time: i64) {
    let pair = Arc::new((Mutex::new(false), Condvar::new()));
    let pair2 = Arc::clone(&pair);

    thread::spawn(move || {
        let (lock, cvar) = &*pair2;
        let mut started = lock.lock().unwrap();
        *started = true;
        // We notify the condvar that the value has changed.
        cvar.notify_one();
    });

    // wait for the thread to start up
    let (lock, cvar) = &*pair;
    let mut started = lock.lock().unwrap();
    // as long as the value inside the `Mutex<bool>` is `false`, we wait
    let duration = (end_time - Utc::now().timestamp() ).unsigned_abs() * 60;
    loop {
        let result = cvar
            .wait_timeout(started, Duration::from_secs(duration))
            .unwrap();
        started = result.0;
        if *started {
            // We received the notification and the value has been updated, we can leave.
            break;
        }
    }
    println!("WE'RE DONE");
}

